generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName           String
  lastName            String
  email               String           @unique
  password            String
  photoURL            String
  Playlist            Playlist[]
  SharedPlaylists     SharedPlaylist[] @relation("sender")
  SharedWithPlaylists SharedPlaylist[] @relation("receiver")
}

model Playlist {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  label          String
  desc           String?
  visibility     Visibility @default(PRIVATE)
  playlistArtURL String?
  favorite       Boolean    @default(false)
  createdAt      DateTime   @default(now())

  createdBy User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID    String @db.ObjectId

  SharedPlaylist SharedPlaylist[]
  Songs          Song[]
}

model SharedPlaylist {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  playlist   Playlist @relation(fields: [playlistID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playlistID String   @db.ObjectId
  senderID   String   @db.ObjectId
  sender     User     @relation(name: "sender", fields: [senderID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverID String   @db.ObjectId
  receiver   User     @relation(name: "receiver", fields: [senderID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Song {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  album       String?
  artist      String
  duration    String?
  releaseYear Int?
  deezerURL   String?
  addedAt     DateTime @default(now())

  playlistID String   @db.ObjectId
  playlist   Playlist @relation(fields: [playlistID], references: [id])
}

enum Visibility {
  PUBLIC
  PRIVATE
}
